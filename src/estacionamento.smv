MODULE cancela(areaAtual, areaEntrada, areaSaida, sentidoCarro, existeCancelaAberta)
VAR
  aberto : boolean;
ASSIGN
  init(aberto) := FALSE;
  next(aberto) := areaAtual = areaEntrada & sentidoCarro = entrando & !existeCancelaAberta |
                  areaAtual = areaSaida & sentidoCarro = saindo & !existeCancelaAberta;


MODULE semaforo(areaCarro, podeAbrir)
VAR
  temCarroEsperando : boolean;
  estaAberto : boolean;
ASSIGN
  init(temCarroEsperando) := FALSE;
  init(estaAberto) := FALSE;

  next(temCarroEsperando) :=
    case
      !temCarroEsperando : {FALSE, TRUE};
      TRUE : temCarroEsperando;
    esac;
  next(estaAberto) := temCarroEsperando & areaCarro = semCarro & podeAbrir;


MODULE cancelas(semaforoEntrada, semaforoSaida)
VAR
  sentidoCarro : {entrando, saindo, semCarro};
  areaCarro : {cancelaEntrada, entreCancelas, cancelaSaida, semCarro};
  cancela1 : process cancela(areaCarro, cancelaEntrada, entreCancelas, sentidoCarro, cancela2.aberto);
  cancela2 : process cancela(areaCarro, entreCancelas, cancelaSaida, sentidoCarro, cancela1.aberto);
ASSIGN
  init(sentidoCarro) := semCarro;
  init(areaCarro) := semCarro;

  next(sentidoCarro) :=
    case
      sentidoCarro = semCarro & semaforoEntrada.estaAberto : entrando;
      sentidoCarro = semCarro & semaforoSaida.estaAberto : saindo;
      TRUE : sentidoCarro;
    esac;

  next(areaCarro) :=
    case
      areaCarro = semCarro & semaforoEntrada.estaAberto : cancelaEntrada;
      areaCarro = semCarro & semaforoSaida.estaAberto : cancelaSaida;

      sentidoCarro = entrando & areaCarro = cancelaEntrada & cancela1.aberto : entreCancelas;
      sentidoCarro = entrando & areaCarro = entreCancelas & cancela2.aberto : cancelaSaida;
      sentidoCarro = entrando & areaCarro = cancelaSaida : semCarro;
      
      sentidoCarro = saindo & areaCarro = cancelaSaida & cancela2.aberto : entreCancelas;
      sentidoCarro = saindo & areaCarro = entreCancelas & cancela1.aberto : cancelaEntrada;
      sentidoCarro = saindo & areaCarro = cancelaEntrada : semCarro;

      TRUE : areaCarro;
    esac;


MODULE main
VAR
  lotado : boolean;
  portaoCancela : process cancelas(semaforoEntrada, semaforoSaida);
  semaforoEntrada : process semaforo(portaoCancela.areaCarro, semaforoSaida.estaAberto);
  semaforoSaida : process semaforo(portaoCancela.areaCarro, TRUE);
ASSIGN
  init(lotado) := FALSE;
  next(lotado) :=
    case
      lotado & portaoCancela.sentidoCarro = saindo : FALSE;
      !lotado & portaoCancela.sentidoCarro = entrando & portaoCancela.areaCarro = saindo : {FALSE, TRUE};
      TRUE : lotado;
    esac;

SPEC AX (!(portaoCancela.cancela1.aberto & portaoCancela.cancela2.aberto));
SPEC AX (!(semaforoEntrada.estaAberto & semaforoSaida.estaAberto));

SPEC portaoCancela.areaCarro = entreCancelas -> AX (portaoCancela.areaCarro = cancelaEntrada | portaoCancela = cancelaSaida) & AX (portaoCancela.areaCarro = semCarro);
SPEC semaforoEntrada.estaAberto -> AX (portaoCancela.areaCarro = entreCancelas);
SPEC (portaoCancela.sentidoCarro = entrando & portaoCancela.areaCarro = cancelaSaida) -> (AX portaoCancela.areaCarro = semCarro & portaoCancela.sentidoCarro = semCarro);
